{"ast":null,"code":"var _jsxFileName = \"/home/danbo/Desktop/graphQL-basic/client/src/components/BookList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport { GET_BOOKS, DELETE_BOOK } from '../queries/queries';\nimport { BookDetails } from './BookDetails';\nimport { Grid, GridItem, Button, ButtonGroup, Wrap, useDisclosure, IconButton } from \"@chakra-ui/react\";\nimport { DeleteIcon } from '@chakra-ui/icons'; // const gql=require('graphql-tag');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BookList = () => {\n  _s();\n\n  const [selected, setSelected] = useState(null);\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_BOOKS);\n  const [deleteBook] = useMutation(DELETE_BOOK, {\n    update(cache, {\n      data: {\n        deleteBook\n      }\n    }) {\n      cache.modify({\n        fields: {\n          books(existingTodos = []) {\n            const newTodoRef = cache.writeFragment({\n              data: deleteBook,\n              fragment: gql`\n                        fragment NewTodo on Books {\n                          id\n                        }\n                      `\n            });\n            return [...existingTodos, newTodoRef];\n          }\n\n        }\n      });\n    }\n\n  });\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  const handleDelete = e => {\n    e.preventDefault();\n    console.log(IconButton.value);\n    deleteBook({\n      variables: {\n        id: e.target.value\n      } // ,refetchQueries:[{query:GET_BOOKS}]\n\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      minH: 'xs',\n      templateColumns: \"repeat(2,1fr)\",\n      gap: 4,\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 1,\n        children: /*#__PURE__*/_jsxDEV(Wrap, {\n          spacing: 4,\n          children: data.books.map(dog => /*#__PURE__*/_jsxDEV(ButtonGroup, {\n            isAttached: true,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: e => {\n                setSelected(selected => dog.id);\n              },\n              value: dog.name,\n              children: dog.name\n            }, dog.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              value: dog.id,\n              onClick: handleDelete,\n              \"aria-label\": \"Delete\",\n              icon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 113\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 1,\n        children: /*#__PURE__*/_jsxDEV(BookDetails, {\n          bookid: selected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookList, \"CzqKC7hQvHLBET0tGHhk+BAJ/r4=\", false, function () {\n  return [useDisclosure, useQuery, useMutation];\n});\n\n_c = BookList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookList\");","map":{"version":3,"sources":["/home/danbo/Desktop/graphQL-basic/client/src/components/BookList.js"],"names":["React","useState","useMutation","useQuery","gql","GET_BOOKS","DELETE_BOOK","BookDetails","Grid","GridItem","Button","ButtonGroup","Wrap","useDisclosure","IconButton","DeleteIcon","BookList","selected","setSelected","isOpen","onToggle","loading","error","data","deleteBook","update","cache","modify","fields","books","existingTodos","newTodoRef","writeFragment","fragment","message","handleDelete","e","preventDefault","console","log","value","variables","id","target","map","dog","name"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport {useMutation, useQuery,gql} from '@apollo/client';\nimport { GET_BOOKS,DELETE_BOOK} from '../queries/queries';\nimport { BookDetails } from './BookDetails';\nimport {\n        Grid,\n        GridItem,\n        Button,\n        ButtonGroup,\n        Wrap,\n        useDisclosure,\n        IconButton } from \"@chakra-ui/react\";\nimport { DeleteIcon} from '@chakra-ui/icons'\n\n// const gql=require('graphql-tag');\n\n\n\nexport const BookList=()=>{\n    const [selected,setSelected]=useState(null);\n    const { isOpen, onToggle } = useDisclosure();\n    const { loading, error, data } = useQuery(GET_BOOKS);\n    const [deleteBook]=useMutation(DELETE_BOOK,{\n            update(cache, { data: { deleteBook } }) {\n              cache.modify({\n                fields: {\n                  books(existingTodos = []) {\n                    const newTodoRef = cache.writeFragment({\n                      data: deleteBook,\n                      fragment: gql`\n                        fragment NewTodo on Books {\n                          id\n                        }\n                      `\n                    });\n                    return [...existingTodos, newTodoRef];\n                  }\n                }\n              });\n            }\n          });\n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n\n    const handleDelete=(e)=>{\n        e.preventDefault();\n        console.log(IconButton.value)\n        deleteBook({variables:{id:e.target.value}\n                        // ,refetchQueries:[{query:GET_BOOKS}]\n                    });\n        \n    }\n\n    return(\n        <div>\n            <Grid minH={'xs'}\n                  templateColumns=\"repeat(2,1fr)\"\n                  gap={4}>\n                <GridItem colSpan={1}>\n                    <Wrap spacing={4}>\n                    {data.books.map(dog => (\n                        <ButtonGroup isAttached>\n                        <Button \n                        \n                        onClick={(e)=>{\n                                    setSelected(selected=>dog.id);\n                                    }} \n                        key={dog.id} value={dog.name}>\n                        {dog.name}\n                        </Button>\n                                    <IconButton value={dog.id} onClick={handleDelete} aria-label=\"Delete\" icon={<DeleteIcon/>}/>\n                        </ButtonGroup>\n                    ))}\n                    </Wrap>\n                </GridItem>\n                \n                    <GridItem colSpan={1}>\n                            <BookDetails bookid={selected}/>\n                    </GridItem>\n                \n            </Grid>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}