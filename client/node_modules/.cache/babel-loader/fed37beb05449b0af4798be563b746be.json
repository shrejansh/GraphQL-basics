{"ast":null,"code":"var _jsxFileName = \"/home/danbo/Desktop/graphQL-basic/client/src/components/BookList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_BOOKS } from '../queries/queries';\nimport { BookDetails } from './BookDetails';\nimport { Grid, GridItem, Button, ButtonGroup, Box, Wrap, useDisclosure, IconButton } from \"@chakra-ui/react\"; // const gql=require('graphql-tag');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BookList = () => {\n  _s();\n\n  const [selected, setSelected] = useState(null);\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_BOOKS);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      minH: 'xs',\n      templateColumns: \"repeat(2,1fr)\",\n      gap: 4,\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 1,\n        children: /*#__PURE__*/_jsxDEV(Wrap, {\n          spacing: 4,\n          children: data.books.map(dog => /*#__PURE__*/_jsxDEV(Button, {\n            onClick: e => {\n              setSelected(selected => dog.id);\n            },\n            value: dog.name,\n            children: dog.name\n          }, dog.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 1,\n        children: /*#__PURE__*/_jsxDEV(BookDetails, {\n          bookid: selected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookList, \"UgL8HKLqt7sFsEmyjWwedqZLiyY=\", false, function () {\n  return [useDisclosure, useQuery];\n});\n\n_c = BookList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookList\");","map":{"version":3,"sources":["/home/danbo/Desktop/graphQL-basic/client/src/components/BookList.js"],"names":["React","useEffect","useState","useQuery","GET_BOOKS","BookDetails","Grid","GridItem","Button","ButtonGroup","Box","Wrap","useDisclosure","IconButton","BookList","selected","setSelected","isOpen","onToggle","loading","error","data","message","books","map","dog","e","id","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SACQC,IADR,EAEQC,QAFR,EAGQC,MAHR,EAIQC,WAJR,EAKQC,GALR,EAMQC,IANR,EAOQC,aAPR,EAQQC,UARR,QAQ0B,kBAR1B,C,CAUA;;;AAIA,OAAO,MAAMC,QAAQ,GAAC,MAAI;AAAA;;AACtB,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAuBd,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM;AAAEe,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAuBN,aAAa,EAA1C;AACA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BlB,QAAQ,CAACC,SAAD,CAAzC;AAEA,MAAIe,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAGX,sBACI;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,IAAI,EAAE,IAAZ;AACM,MAAA,eAAe,EAAC,eADtB;AAEM,MAAA,GAAG,EAAE,CAFX;AAAA,8BAGI,QAAC,QAAD;AAAU,QAAA,OAAO,EAAE,CAAnB;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,OAAO,EAAE,CAAf;AAAA,oBACCD,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeC,GAAG,iBACf,QAAC,MAAD;AAEA,YAAA,OAAO,EAAGC,CAAD,IAAK;AACFV,cAAAA,WAAW,CAACD,QAAQ,IAAEU,GAAG,CAACE,EAAf,CAAX;AACC,aAJb;AAKa,YAAA,KAAK,EAAEF,GAAG,CAACG,IALxB;AAAA,sBAMCH,GAAG,CAACG;AANL,aAKKH,GAAG,CAACE,EALT;AAAA;AAAA;AAAA;AAAA,kBADH;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ,eAkBQ,QAAC,QAAD;AAAU,QAAA,OAAO,EAAE,CAAnB;AAAA,+BACQ,QAAC,WAAD;AAAa,UAAA,MAAM,EAAEZ;AAArB;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,cAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BH,CApCM;;GAAMD,Q;UAEoBF,a,EACIT,Q;;;KAHxBW,Q","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport {useQuery} from '@apollo/client';\nimport { GET_BOOKS } from '../queries/queries';\nimport { BookDetails } from './BookDetails';\nimport {\n        Grid,\n        GridItem,\n        Button,\n        ButtonGroup,\n        Box,\n        Wrap,\n        useDisclosure,\n        IconButton } from \"@chakra-ui/react\";\n\n// const gql=require('graphql-tag');\n\n\n\nexport const BookList=()=>{\n    const [selected,setSelected]=useState(null);\n    const { isOpen, onToggle } = useDisclosure();\n    const { loading, error, data } = useQuery(GET_BOOKS);\n\n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n\n\n    return(\n        <div>\n            <Grid minH={'xs'}\n                  templateColumns=\"repeat(2,1fr)\"\n                  gap={4}>\n                <GridItem colSpan={1}>\n                    <Wrap spacing={4}>\n                    {data.books.map(dog => (\n                        <Button \n                        \n                        onClick={(e)=>{\n                                    setSelected(selected=>dog.id);\n                                    }} \n                        key={dog.id} value={dog.name}>\n                        {dog.name}\n                        </Button>\n                    ))}\n                    </Wrap>\n                </GridItem>\n                \n                    <GridItem colSpan={1}>\n                            <BookDetails bookid={selected}/>\n                    </GridItem>\n                \n            </Grid>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}