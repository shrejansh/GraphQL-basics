{"ast":null,"code":"var _jsxFileName = \"/home/danbo/Desktop/graphQL-basic/client/src/components/BookList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_BOOKS } from '../queries/queries';\nimport { ListItem, UnorderedList } from \"@chakra-ui/react\"; // const gql=require('graphql-tag');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BookList = () => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_BOOKS);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`; // useEffect(()=>{\n  //     console.log(data)\n  // },[data])\n\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(UnorderedList, {\n      children: data.books.map(dog => /*#__PURE__*/_jsxDEV(ListItem, {\n        onClick: e => {},\n        value: dog.name,\n        children: dog.name\n      }, dog.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookList, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = BookList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookList\");","map":{"version":3,"sources":["/home/danbo/Desktop/graphQL-basic/client/src/components/BookList.js"],"names":["React","useEffect","useState","useQuery","GET_BOOKS","ListItem","UnorderedList","BookList","loading","error","data","message","console","log","books","map","dog","e","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,SAAQC,QAAR,EACQC,aADR,QAC6B,kBAD7B,C,CAGA;;;AAIA,OAAO,MAAMC,QAAQ,GAAC,MAAI;AAAA;;AACtB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACC,SAAD,CAAzC;AAEA,MAAII,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B,CAJW,CAMtB;AACA;AACA;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,sBACI;AAAA,2BACI,QAAC,aAAD;AAAA,gBACCA,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAeC,GAAG,iBACf,QAAC,QAAD;AAAU,QAAA,OAAO,EAAGC,CAAD,IAAK,CAAE,CAA1B;AAAyC,QAAA,KAAK,EAAED,GAAG,CAACE,IAApD;AAAA,kBACCF,GAAG,CAACE;AADL,SAAiCF,GAAG,CAACG,EAArC;AAAA;AAAA;AAAA;AAAA,cADH;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAtBM;;GAAMZ,Q;UACwBJ,Q;;;KADxBI,Q","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport {useQuery} from '@apollo/client';\nimport { GET_BOOKS } from '../queries/queries';\n\nimport {ListItem,\n        UnorderedList } from \"@chakra-ui/react\";\n\n// const gql=require('graphql-tag');\n\n\n\nexport const BookList=()=>{\n    const { loading, error, data } = useQuery(GET_BOOKS);\n\n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n\n    // useEffect(()=>{\n    //     console.log(data)\n    // },[data])\n    console.log(data)\n    return(\n        <div>\n            <UnorderedList>\n            {data.books.map(dog => (\n                <ListItem onClick={(e)=>{}} key={dog.id} value={dog.name}>\n                {dog.name}\n                </ListItem>\n            ))}\n            </UnorderedList>\n            \n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}